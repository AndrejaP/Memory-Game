/*adding resetting to all items. Box-sizing does not apply to margin*/
* {
	padding: 0;
	margin: 0;
	box-sizing: border-box;
}


body {
	background: #333;
	font-family: 'Love Ya Like A Sister', cursive;
	font-size: 26px;
	color: #5871a7;
	overflow: hidden;
	text-shadow: 6px 6px 3px #111;
}


.grid-container {
	height: 100vh;
	width: 100%;
	display: grid;
	grid-template-columns: 100%;
	grid-template-rows: auto 100vw auto;
	grid-template-areas: 
		"header"
		"main"
		"aside";
	grid-gap: 0 10px;
	justify-content: center;
	align-content: center;
	align-items: stretch;
}


header {
	grid-area: header;
	align-self: end;
	justify-self: center;
	text-align: center;
}


aside {
	grid-area: aside;
	align-self: start;
	justify-self: stretch;
	display: flex;
	flex-flow: row wrap;
	justify-content: space-between;
	align-items: center;
	line-height: 36px;
	padding: 0 10px;
	white-space: nowrap;
}


main {
	grid-area: main;
	padding: 10px;
}


.memory-game {
	display: grid;
	grid-template-columns: repeat(4, 1fr);
	grid-template-rows: repeat(4, 1fr);
	grid-gap: 10px;
	justify-items: stretch;
	align-items: stretch;
	perspective: 1000px; /*gives depth to the elements*/
}


.memory-card {
	cursor: pointer;
	transform: scale(1); /*we need a starting place for the transition to work.hm Not sure about that*/
	transform-style: preserve-3d; /*that is gonna insert our cards into the 3d space we created in memory-game container*/
	transition: transform 0.6s;
}


.memory-card:active {
	transform: scale(.97);
	/*transition: transform 1s;*/
	transition: all 0.6s; /*all is a trick I discovered when making the portfolio*/
}


.memory-card.flip { /*no spaces because the two classes belong to the same element*/
	transform: rotateY(180deg);
}


.front,
.back {
	border-radius: 10px;
	box-shadow: 5px 5px 5px black;
	width: 100%;
	height: 100%;
	position: absolute;
	backface-visibility: hidden;/*every HTML element has a backface which is a mirrored image of itself*/
}


.front {
	transform: rotateY(180deg);
	/*backface-visibility: visible; this shows the paintings but with shadow to the left*/
}


.stars {
	display: inline-block;
	font-size: 0.5em;
}


li {
	list-style: none;
	display: inline-block;
}


.timer {
	min-width: 2.5em;
}


.moves {
	min-width: 1.1em;
	text-align: right;
}


.restart {
	cursor: pointer;
	font-size: 0.7em;
	padding-top: 0.3em;
}


/* Styles for the congratulations modal*/
.modal-container {
	width: 100%; /*it covers the entire background*/
	height: 100%;
	/*opacity: 0.6; the child, the modal, would inherit this opacity*/
	background-color: rgba(0, 0, 0, 0.6); /*the children elements dont inherit the opacity if we put it like this.*/
	position: absolute;
	top: 0;
	display: none; /* will be modified to flex via js */
	justify-content: center;
	align-items: center;
}


.modal {
	width: 500px;
	height: 440px;
	color: cornflowerblue;
	font-size: 24px;
	background-color: #555;
	border: 10px solid palegreen;
	border-radius: 30px;
	text-align: center;
	padding: 20px;
	display: flex;
	flex-direction: column;
	justify-content: space-around;
	align-items: center;
}


.modal img {
	filter: drop-shadow(6px 6px 4px #222);
	width: 130px;
}


button {
	border-radius: 8px;
	background-color: palegreen;
	color: #0000e6;
	font: inherit;
	cursor: pointer;
	padding: 2px;
	outline: none;
}


span {
	display: inline-block;
}


/*https://css-tricks.com/snippets/css/shake-css-keyframe-animation/:*/
.animation {
	animation: shake 0.82s cubic-bezier(.36,.07,.19,.97) both;
	transform: rotateY(180deg) translate3d(0, 0, 0);
	backface-visibility: inherit;
}


@keyframes shake {
	10%, 90% {
		transform: rotateY(180deg) translate3d(-1px, 0, 0);
	}

	20%, 80% {
		transform: rotateY(180deg) translate3d(2px, 0, 0);
	}

	30%, 50%, 70% {
		transform: rotateY(180deg) translate3d(-4px, 0, 0);
	}

	40%, 60% {
		transform: rotateY(180deg) translate3d(4px, 0, 0);
	}
}


@media screen and (min-aspect-ratio: 17/20) {
	
	.grid-container {
		grid-template-columns: calc(100vh - 100px);
		grid-template-rows: 50px calc(100vh - 100px) 50px;
	}
}


@media screen and (orientation: landscape) {
	
	.modal {
		max-height: 100vh;
	}
}


@media screen and (min-aspect-ratio: 4/3) {
	
	.grid-container {
		grid-template-columns: 100vh 150px;
		grid-template-rows: 50% 50%;
		grid-template-areas: 
			"main header"
			"main aside";
		grid-gap: 0;
	}
	
	
	aside {
		justify-self: center;
		flex-direction: column;
		justify-content: flex-start;
		padding: 0;
	}
}

@media screen and (min-aspect-ratio: 4/3) and (min-height: 600px) {
	
	main {
		padding: 20px;
	}

	.memory-game {
		grid-gap: 20px;
	}
}